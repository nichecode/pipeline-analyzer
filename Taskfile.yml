version: '3'

vars:
  APP_NAME: pipeline-analyzer
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'

env:
  CGO_ENABLED: 0

tasks:
  default:
    desc: Show available tasks and installation instructions
    cmds:
      - echo "🚀 Pipeline Analyzer - Auto-Discovery Build Tool Analysis"
      - echo ""
      - echo "📦 INSTALLATION (Recommended):"
      - echo "   git clone https://github.com/nichecode/pipeline-analyzer.git"
      - echo "   cd pipeline-analyzer && task install"
      - echo ""
      - echo "🎯 USAGE:"
      - echo "   pipeline-analyzer                    (analyze current directory)"
      - echo "   pipeline-analyzer /path/to/repo     (analyze specific repository)"
      - echo ""
      - echo "📋 Available development tasks:"
      - task --list

  deps:
    desc: 📦 Install dependencies
    cmds:
      - echo "📦 Installing dependencies..."
      - go mod tidy
      - go mod download
      - go mod verify

  build:
    desc: 🔨 Build pipeline-analyzer
    cmds:
      - echo "🔨 Building {{.APP_NAME}}..."
      - go build -ldflags "-X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}}" -o {{.APP_NAME}} ./cmd/{{.APP_NAME}}
    sources:
      - cmd/pipeline-analyzer/main.go
      - internal/**/*.go
      - go.mod
      - go.sum
    generates:
      - "{{.APP_NAME}}"

  install:
    desc: 📲 Install with go install (recommended)
    cmds:
      - echo "📦 Installing {{.APP_NAME}} with go install..."
      - go install ./cmd/{{.APP_NAME}}
      - echo "✅ Installed {{.APP_NAME}} to $(go env GOPATH)/bin/"
      - echo "💡 Make sure $(go env GOPATH)/bin is in your PATH"
      - echo "💡 Now you can run '{{.APP_NAME}}' from anywhere!"

  install-dev:
    desc: 📲 Install development build locally
    deps: [build]
    cmds:
      - mkdir -p ~/bin
      - cp {{.APP_NAME}} ~/bin/
      - echo "✅ Installed development build to ~/bin"
      - echo "💡 Make sure ~/bin is in your PATH"

  run:
    desc: 🚀 Run pipeline-analyzer with default config
    deps: [build]
    cmds:
      - echo "🚀 Running {{.APP_NAME}}..."
      - ./{{.APP_NAME}} {{.CLI_ARGS}}

  run-help:
    desc: 🚀 Show pipeline-analyzer help
    deps: [build]
    cmds:
      - ./{{.APP_NAME}} --help

  run-version:
    desc: 🚀 Show pipeline-analyzer version
    deps: [build]
    cmds:
      - ./{{.APP_NAME}} --version

  clean:
    desc: 🧹 Clean up build artifacts
    cmds:
      - echo "🧹 Cleaning up..."
      - rm -f {{.APP_NAME}}
      - rm -rf dist/
      - rm -rf .discovery/
      - rm -rf circleci-analysis/
      - go clean

  test:
    desc: 🧪 Run tests
    cmds:
      - echo "🧪 Running tests..."
      - go test -v ./...

  test-coverage:
    desc: 🧪 Run tests with coverage
    cmds:
      - echo "🧪 Running tests with coverage..."
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "📊 Coverage report generated coverage.html"

  fmt:
    desc: 🎯 Format code
    cmds:
      - echo "🎯 Formatting code..."
      - go fmt ./...
      - goimports -w . 2>/dev/null || true

  lint:
    desc: 🔍 Lint code
    cmds:
      - echo "🔍 Linting code..."
      - golangci-lint run || echo "💡 Install golangci-lint for better linting"

  vet:
    desc: 🔍 Vet code
    cmds:
      - echo "🔍 Vetting code..."
      - go vet ./...

  release:
    desc: 📦 Build release versions for multiple platforms
    cmds:
      - echo "📦 Building release versions..."
      - mkdir -p dist
      - task: release-build
        vars:
          GOOS: darwin
          GOARCH: amd64
          SUFFIX: darwin-amd64
      - task: release-build
        vars:
          GOOS: darwin
          GOARCH: arm64
          SUFFIX: darwin-arm64
      - task: release-build
        vars:
          GOOS: linux
          GOARCH: amd64
          SUFFIX: linux-amd64
      - task: release-build
        vars:
          GOOS: linux
          GOARCH: arm64
          SUFFIX: linux-arm64
      - task: release-build
        vars:
          GOOS: windows
          GOARCH: amd64
          SUFFIX: windows-amd64
          EXT: .exe
      - echo "✅ Release builds completed in dist/"
      - ls -la dist/

  release-build:
    internal: true
    cmds:
      - GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags "-X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}}" -o dist/{{.APP_NAME}}-{{.SUFFIX}}{{.EXT}} ./cmd/{{.APP_NAME}}

  check:
    desc: 🔎 Run all checks (fmt, vet, lint, test)
    cmds:
      - task: fmt
      - task: vet
      - task: lint
      - task: test

  setup:
    desc: 🛠️ Initial setup for development
    cmds:
      - echo "🛠️ Setting up {{.APP_NAME}} development environment..."
      - task: deps
      - task: build
      - echo "✅ Setup complete!"
      - echo ""
      - echo "📦 For end users, recommend:"
      - echo "   go install github.com/nichecode/pipeline-analyzer/cmd/pipeline-analyzer@latest"
      - echo ""
      - echo "🛠️ For development:"
      - echo "   task demo                    # See auto-discovery in action"
      - echo "   task install-dev             # Install development build"
      - echo "   task run-help                # Show help output"

  update:
    desc: 🔄 Update dependencies
    cmds:
      - echo "🔄 Updating dependencies..."
      - go get -u ./...
      - go mod tidy
      - echo "✅ Dependencies updated"

  demo:
    desc: 🎬 Run auto-discovery demo on current repository
    deps: [build]
    cmds:
      - echo "🎬 Running auto-discovery demo..."
      - echo "🔍 This analyzes the current repository automatically"
      - echo "💡 End users would run pipeline-analyzer"
      - ./{{.APP_NAME}}
      - echo "📁 Demo complete! Check .discovery/pipeline-analyzer/"

  analyze-self:
    desc: 🔍 Analyze this project with auto-discovery
    deps: [build]
    cmds:
      - echo "🔍 Running auto-discovery on this repository..."
      - ./{{.APP_NAME}}
      - echo "✅ Self-analysis complete! Check .discovery/pipeline-analyzer/"

  test-examples:
    desc: 🧪 Test analyzer on all examples
    deps: [build]
    cmds:
      - echo "🧪 Testing pipeline analyzer on examples..."
      - for example in examples/*/; do echo "Testing $$example"; ./{{.APP_NAME}} "$$example" || true; done
      - echo "✅ Example testing complete!"

  demo-complex:
    desc: 🎬 Demo analyzer on complex webapp example
    deps: [build]
    cmds:
      - echo "🎬 Running demo on complex webapp example..."
      - ./{{.APP_NAME}} examples/complex-webapp
      - echo "📁 Results available in examples/complex-webapp/.discovery/"
      - echo "🌐 Open examples/complex-webapp/.discovery/pipeline-analyzer/index.html in browser"
      - echo "📝 Or view examples/complex-webapp/.discovery/pipeline-analyzer/README.md"

  open-example:
    desc: 🌐 Open complex webapp analysis in browser
    cmds:
      - open examples/complex-webapp/.discovery/pipeline-analyzer/index.html

  clean-examples:
    desc: 🧹 Clean up all example analysis results
    cmds:
      - echo "🧹 Cleaning up example analysis results..."
      - rm -rf examples/*/.discovery/
      - echo "✅ Example cleanup complete!"